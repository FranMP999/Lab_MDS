---
jupyter: python3
---

<h1><center>Laboratorio 1: Git üëæ</center></h1>

<center><strong>MDS7202: Laboratorio de Programaci√≥n Cient√≠fica para Ciencia de Datos - Oto√±o 2025</strong></center>

### Cuerpo Docente:

- Profesores: Stefano Schiappacasse,Sebasti√°n Tinoco
- Auxiliares: Melanie Pe√±a, Valentina Rojas
- Ayudantes: Angelo Mu√±oz, Valentina Z√∫√±iga

### Equipo: **SUPER IMPORTANTE - notebooks sin nombre no ser√°n revisados**

- Nombre de alumno 1: Francisco Maldonado
- Nombre de alumno 2:

### **Link de repositorio de GitHub:** [Insertar Enlace](https://github.com/FranMP999/)

## Reglas:

- **Grupos de 2 personas**
- Fecha de entrega: 6 d√≠as de plazo con descuento de 1 punto por d√≠a. Entregas Martes a las 23:59.
- Instrucciones del lab el viernes a las 16:15 en formato online. Asistencia no es obligatoria, pero se recomienda fuertemente asistir.
- <u>Prohibidas las copias</u>. Cualquier intento de copia ser√° debidamente penalizado con el reglamento de la escuela.
- Tienen que subir el laboratorio a u-cursos y a su repositorio de github. Labs que no est√©n en u-cursos no ser√°n revisados. Recuerden que el repositorio tambi√©n tiene nota.
- Cualquier duda fuera del horario de clases al foro. Mensajes al equipo docente ser√°n respondidos por este medio.
- Pueden usar cualquier material del curso que estimen conveniente.

## Objetivos del lab:


- Conocer los elementos b√°sicos que conformar `Git`
- Clonar repositorios
- Identificar ramas de un repositorio
- Reconocer y solucionar problemas entre ramas
- Subir cambios a un repositorio

## Parte 1: Conocimiento Te√≥rico (2.5 pts)

<p align="center">
  <img src="https://cdn.thedesigninspiration.com/wp-content/uploads/sites/3/2019/04/macintosh-hdusersbrittanyloefflerdownloadsanig-1.gif" width="350">
</p>

Responda las siguientes preguntas (0.2 pts c/u):

1. ¬øQu√© es `Git` y c√≥mo se relaciona con el control de versiones?

2. Nombre y explique 3 diferencias entre `Git` y `Github`.

3. ¬øQu√© es un `hash` y c√≥mo se representa en un `commit`? De un ejemplo.

4. ¬øQue elementos componen a la estructura de datos de `Git`?

5. ¬øQue comandos de `Git` sirven para crear un repositorio y hacer seguimiento a cambios en los archivos?

<code>Escriba sus respuestas ac√°:</code>

1. `Git` es un Sistema de de Control de Versiones Distribuido. Permite desarrollar un proyecto de manera cooperativa organizando el problema de versionamiento y guardando una copia segura del historial de proyecto en un servidor.

2. * Git es un SVC mientras que Github es un servicio Web
   * Git es una herramienta de l√≠nea de comando mientras que Github es una aplicaci√≥n gr√°fica web.
   * Git trabaja con documentos locales y se comunica con Github para crear una copia en servidor. 

3. Un hash en git es una llave SHA1, cada objeto en git es identificado con una llave hash asociada, cuando el documento se modifica, la llave cambia. Un commit es un objeto en git, que contiene la informaci√≥n de un snapshot del proyecto, en particular contiene el hash asociado al √°rbol del snapshot, un mensaje detallando el cambio realizado, el autor y una referencia al cambio anterior (al commit anterior).

Ej. de commit: 
-"Se separa el proyecto en modulos"
Mezoskypushed 1 commit to main ‚Ä¢ c8b1a62‚Ä¶362fe21 ‚Ä¢ on Mar 23, 2023

4. Todo elemento en `Git` es un objeto. Por ejemplo, un commit es un objeto, otro objeto posible son los √°rboles, cuyas hojas son archivos almacenados como objetos y permiten estructurar los proyectos de forma eficiente y ordenada, m√°s apta para un SVC que un sistema de subdirectorios cl√°sico (en .git/objects existen subdirectorios pero s√≥lo por limitaci√≥n del sistema de archivos, la estructura real con la que se trabaja es la de √°rboles).

6. Un repositorio se inicializa localmente en `Git` con `git init` o directamente clonando un repositorio remoto con `git clone`. Para hacer seguimiento a cambios en los archivos los comandos m√°s usados son `git status` y `git log`.

Responda si las siguientes afirmaciones son Verdaderas (V) o Falsas (F). Justifique en **cualquiera** de los casos (0.2 pts c/u):


6. `Git` siempre resuelve autom√°ticamente los problemas de lineas al hacer merge entre diferentes ramas.
       F. A veces git no es capaz de resolver los choques y se debe hacer manual.
8. Ejecutar `git pull` sobre un repositorio es equivalente a ejecutar `git clone`.
       No es equivalente, la diferencia principal es que git pull actualiza el repositorio si es que existe, mientras que git clone siempre realiza una copia local nueva.
10. `git status` genera los mismos resultados que `git log`.
11. En `Git` es posible deshacer cambios y volver a versiones anteriores del c√≥digo.
12. El comando `git commit` se utiliza para enviar cambios al repositorio remoto.

<code>Escriba sus respuestas ac√°:</code>

6. F. A veces git no es capaz de resolver los choques y se debe hacer de forma manual cuando los choques son inconciliables (conflictos).
8. F. No es equivalente, la diferencia principal es que git pull actualiza el repositorio si es que existe, mientras que git clone siempre realiza una copia local nueva.
10. F. `git status` muestra el estado actual local de la rama del repositorio respecto al directorio de trabajo y el staging area, mientras que `git log` muestra el historial de commits.
11. V. En `Git` se pueden deshacer cambios y volver a versiones anteriores del c√≥digo, pero no es sencillo.
12. F. El comando `git commit` para actualizar los cambios del staging al repositorio local, para enviarlos al remoto se debe usar `git push`.

Por √∫ltimo, investigue y comente con sus palabras para qu√© sirven los siguientes comandos:

11. `git stash` (0.25 puntos)
    
    git stash env√≠a un snapshot del proyecto a una √°rea distinta al directorio de trabajo, staging y el repo. Sirve para cuando tenemos un cambio que no est√° listo para commitear pero no queremos perderlo al cambiar de rama.
12. `git reset`. ¬øCu√°l es la diferencia de este comando con `git revert`?. (0.25 puntos)

    `git reset` mueve el puntero de la rama a un commit diferente, lo cual en la pr√°ctica permite volver a un estado anterior del proyecto borrando el historial que hay despu√©s. `git revert` en cambio, crea un nuevo commit duplicando un commit previo, suponiendo as√≠ una forma segura de deshacer cambios, pues no reescribe el historial de commits, sino que lo extiende.

## Parte 2: Creando una presentaci√≥n personal (1.5 pts)

<p align="center">
  <img src="https://media.tenor.com/arqlNu8gyJYAAAAC/cat-cat-jumping.gif" width="150">
</p>


Para empezar a "*soltar las manos*" con `Git`, se les encomienda crear un repositorio con una presentaci√≥n personal. El repositorio debe contener un breve resumen de quienes son ustedes, sus gustos, experiencias, y cualquier otro detalle interesante que ustedes consideren relevante.

Para realizar esto, deben seguir los siguientes pasos:

1. Contar con una cuenta de github (1 por persona)
2. Crear un repositorio con su nombre de usuario
3. Vincular el repositorio a su ambiente local ¬øQu√© comando(s) me permiten hacer esto?
4. Crear un archivo `readme.md` con la informaci√≥n que ustedes deseen compartir.
5. Realizar `push` con los cambios generados

A modo de ejemplo, pueden guiarse por esta *suculenta* [presentaci√≥n](https://github.com/Mezosky)

**Nota: Deben trabajar todos estos puntos desde su ambiente local**

*Hint: Una buena opci√≥n es usar templates de presentaci√≥n personal que encuentren en Google, como los que ofrece este [sitio](https://durgeshsamariya.github.io/awesome-github-profile-readme-templates/#/)*.

**Entregable:**

Enlace al repositorio con la presentaci√≥n personal.

IMPORTANTE: DEBEN ADJUNTAR UN ENLACE POR PERSONA

<code>Link Presentacion 1:</code> https://github.com/FranMP999/FranMP999

<code>Link Presentacion 2:</code>

## Parte 3: Trabajando sobre un repositorio externo (2 pts)

<p align="center">
  <img src="https://media.tenor.com/YXL-0SK15j4AAAAC/dance-animals.gif" width="300">
</p>

Tras muchos dolores de cabeza, un grupo de entusiastas acad√©micos decidieron aprender sobre `Git` y as√≠ trabajar colaborativamente de forma m√°s ordenada y eficiente. Despu√©s de una infinidad de intentos y aprender de sus errores "*a la mala*", los acad√©micos lograron levantar un [repositorio](https://github.com/MDS7202/lab1) en `Github`. Usando el repositorio de los acad√©micos, responda las siguientes preguntas (**incluya tambi√©n los comandos en `Git` ocupados**):

1. Clone el repositorio a su ambiente local. (0.25 pts)

<code>Escriba sus respuestas ac√°:</code> `git clone https://github.com/MDS7202/lab1.git`

2. Descomprima los archivos subidos con la tarea en U-cursos en la carpeta reci√©n clonada de github. Una vez realizado esto, cree un archivo `.gitignore` con el cual omita la carpeta `videos` y los archivos con la extensi√≥n `.txt` exceptuando el archivo `171.txt` de la carpeta `texts`. (0.25 pts)

<code>Para esta pregunta usted deber√° adjuntar el .gitignore creado en su repo.</code>

Contenido .gitignore:

```
*.txt
videos/*

!texts/171.txt
```

3. Inspeccione brevemente el repositorio: ¬øCual es el objetivo del proyecto? Explique brevemente la estructura del proyecto, asi como tambi√©n cada elemento que lo conforma. (0.25 pts)

<code>Escriba sus respuestas ac√°:</code>

El objetivo del proyecto es crear un programa para emular sonidos de animales.

La estructura del proyecto es un directorio √∫nico en el cual se encuentran todos los archivos del programa, a saber: `animales.py` y `main.py`. As√≠ como un `readme.md` b√°sico explicando el objetivo.

`animales.py` contiene la funci√≥n principal del programa. `main.py` llama a esta funci√≥n y contiene el componente interactivo.

4. Identifique los √∫ltimos cambios al repositorio, reconociendo las principales ramas de trabajo. ¬øSon informativos los `commit` realizados? (0.25 pts)
*Hint: Se recomienda usar los argumentos `all`, `graph` y `decorate`*

<code>Escriba sus respuestas ac√°:</code>

```
git log --all --graph --decorate
git branch -a
```

Se pueden identificar las siguientes ramas de trabajo: _main, new_freatures, fix-ifs_.

Se pueden reconocer diversos problemas en los commits realizados:
* `primer commit`: No dice nada del commit realizado.
* `se agrega funci√≥n`: No dice nada de la funci√≥n a√±adida.
* `se separa el proyecto en m√≥dulos`: ¬øQu√© m√≥dulos? 
* `fix-ifs`: Comentario no dice nada.

5. Uno de los acad√©micos se da cuenta que la rama principal de trabajo no se ejecuta correctamente para todos los argumentos. Se√±ale y explique el error en el c√≥digo e identifique a la persona que lo cometi√≥ usando `git blame` (0.25 pts)

*Hint: Le puede ser √∫til esta [documentaci√≥n](https://www.atlassian.com/es/git/tutorials/inspecting-a-repository/git-blame).*

<code>Escriba sus respuestas ac√°:</code>

`git blame animales.py`

El problema del c√≥digo est√° en la l√≥gica condicional en `main.py`, siempre que el input sea distinto a _fox_ se levanta un error _'animal no reoconocido :('_.
El culpable es mezosky.

6. Busque los siguientes `commit`:

- `c8b1a62d7299552b0654f930d695b33109214111`
- `362fe21ee44f53ee944cee4ba484600308f83d78`
- `25543a3baf77292baf849726784ca005473acab1`

¬øQu√© diferencias existen entre cada uno? (0.25 pts)

<code>Escriba sus respuestas ac√°:</code>

`git show c8b1a62d7299552b0654f930d695b33109214111 362fe21ee44f53ee944cee4ba484600308f83d78 25543a3baf77292baf849726784ca005473acab1`

En el primer commit se crea la funci√≥n animales al archivo main.py, en el segundo se mueve la funci√≥n a un archivo a parte y en el tercero se arregla la l√≥gica condicional en la funci√≥n.

7. Realice una `merge` de la rama `fix-ifs` con la rama `main` y describa lo que ocurre. ¬øQu√© parte del c√≥digo podr√≠a estar ocasionando esto? (0.25 pts)

<code>Escriba sus respuestas ac√°:</code>

Al realizar el comando `git merge origin/fix-ifs origin/main`, se obtiene el siguiente mensaje de error:
```
Auto-merging main.py
CONFLICT (content): Merge conflict in main.py
Automatic merge failed; fix conflicts and then commit the result.
```
Al ejecutar `git status` se puede identificar que el problema se encuentra en el archivo `main.py`, abriendo este es claro que el conflicto se encuentra en la funci√≥n animales, que en la rama main se encuentra modularizada a un archivo a parte. Adjunto la salida de la l√≠nea de comandos:
```
lab1$ git status && cat main.py
On branch main
Your branch is up to date with 'origin/main'.

You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)
	both modified:   main.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	texts/

no changes added to commit (use "git add" and/or "git commit -a")
<<<<<<< HEAD
from animales import animales
=======
def animales(input):
    
    '''
    Como hace el animalito?
    '''
    
    if input.lower() == 'gato':
        print('miau')
    elif input.lower() == 'perro':
        print('guau')
    elif input.lower() == 'fox':
        print('https://www.youtube.com/watch?v=jofNR_WkoCE')
    else:
        raise ValueError('animal no reconocido :(')
>>>>>>> origin/fix-ifs

if __name__ == '__main__':
    print("Ingrese el animalito para saber que dice:")
    animal = input()
    animales(animal)
```

8. Cree una rama nueva y proponga una soluci√≥n al problema anterior, adjuntando el c√≥digo corregido y se√±alando las l√≠neas modificadas. (0.25 pts)

<code>Escriba sus respuestas ac√°:</code>

Una soluci√≥n que parece sensata en este caso es, dentro de la rama fix-ifs modularizar los cambios a un archivo animals.py, para no volver la rama fix-ifs redundante. 
Si debo crear una rama nueva, la crear√≠a desde main y volver√≠a a realizar desde cero los cambios realizados en fix-ifs pero con el formato modularizado ya precente en main.

`git checkout -b fix-ifs2`

Se edita animales.py cambiando
```
    if input.lower() == 'gato':
        print('miau')
    if input.lower() == 'perro':
        print('guau')
    if input.lower() == 'fox':
        print('https://www.youtube.com/watch?v=jofNR_WkoCE')
    else:
        raise ValueError('animal no reconocido :(')
```
por
```
    if input.lower() == 'gato':
        print('miau')
    elif input.lower() == 'perro':
        print('guau')
    elif input.lower() == 'fox':
        print('https://www.youtube.com/watch?v=jofNR_WkoCE')
    else:
        raise ValueError('animal no reconocido :(')
```

Luego se commitean los cambios y se realiza el merge
```
git add animales.py
git commit -m 'commit para resolver conflictos en merge, asociados a funci√≥n animales'
git merge fix-ifs2 main
```

## Fin

Eso ha sido todo por ahora!! Esperamos que este laboratorio les haya gustado y servido para trabajar con `Git`. Recuerden los dias de plazo que tienen disponibles y que ante cualquier duda no duden en contactar al equipo docente.

Nos vemos!!

<p align="center">
  <img src="https://media.tenor.com/OYLdav9k9LkAAAAd/kitty-cat.gif" width="350">
</p>

