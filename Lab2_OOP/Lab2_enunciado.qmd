---
jupyter: python3
---

```{python}
#| cell_id: b03ebf15860540d9ad125f681d0a4030
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 615
#| execution_start: 1649390595713
#| source_hash: 4fe19af5
import sys

!conda install --yes --prefix {sys.prefix} pillow plotly imageio
```

**Instalar paquetes: Si están usando pip**

```{python}
#| cell_id: baf05f74e45846428adf98468022825f
#| colab: {base_uri: 'https://localhost:8080/'}
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 3440
#| execution_start: 1649390596332
#| scrolled: true
#| source_hash: '509e3204'
import sys

!{sys.executable} -m pip install pillow plotly imageio
```

**En caso de trabajar con colab:**

```{python}
#| cell_id: 1ada5a6e1eec4c8fa01a4f4e1e198403
#| colab: {base_uri: 'https://localhost:8080/'}
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 432
#| execution_start: 1649390599353
#| source_hash: 96d22ffd
try:
    from google.colab import drive

    drive.mount("/content/drive")
    path = "/content/drive/My Drive/CuerpoDocente/Laboratorios/Lab1-Numpy/"
except:
    print('Ignorando conexión drive-colab')
```

```{python}
#| cell_id: 8f0f140488e5441c8e6ebb24f0fcf1ab
#| colab: {background_save: true, base_uri: 'https://localhost:8080/', height: 542}
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 1810
#| execution_start: 1649390599403
#| owner_user_id: badcc427-fd3d-4615-9296-faa43ec69cfb
#| source_hash: e5888155
# En este lab usaremos adicionalmente pillow, una estupenda librería
# para manejar imágenes.
# https://pillow.readthedocs.io/en/stable/

from PIL import Image
import numpy as np
import plotly.express as px

foto = np.array(Image.open("./images_lab/cobija.PNG").convert("RGB")) # Red Green Blue

# Solo para ejemplificar, usaremos plotly (NO USARLO EN LO QUE QUEDA DEL LAB).
# Pero en el restro del laboratorio, matplotlib debe ser usado

fig = px.imshow(foto)
fig.show()
```

Luego, llamando la variable donde alojamos el array podemos ver los valores que componen a esta imagen.

```{python}
#| cell_id: 437a6f72c3144e92a0194183f26dbff0
#| colab: {base_uri: 'https://localhost:8080/'}
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 3697401
#| execution_start: 1649390601207
#| scrolled: true
#| source_hash: b68dfc0f
print(f'Número de dimensiones: {foto.ndim}')
print(f'Número de elementos por dimensión: {foto.shape}')
```

Finalmente visualizamos de forma aleatoria los pixeles de cada canal para mostrar sus intensidades.

```{python}
#| cell_id: 039f76b1acbc44caabcfb028486f857e
#| colab: {base_uri: 'https://localhost:8080/'}
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 3696618
#| execution_start: 1649390601248
#| source_hash: cef24e8f
print(f"Ejemplo de pixel (10, 200) en el canal 0 - Red: {foto[10, 200, 0]}")
print(f"Ejemplo de pixel (10, 200) en el canal 1 - Green: {foto[10, 200, 1]}")
print(f"Ejemplo de pixel (10, 200) en el canal 2 - Blue: {foto[10, 200, 2]}")
```

Con lo anterior, suponiendo que la imagen del "gatito" tiene una altura igual a 600 y un ancho de 400, el tensor $G$ que representa a la imagen vendrá dado por $G[600, 400, 3]$.

### Videos

Luego, si queremos complejizar aún mas esto y queremos tener tensores que agrupen un conjunto de imágenes (de igual tamaño) tendremos lo siguiente:


<br>
<center>
<img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRk4BWrH_xi_blsx9Y32OTT8k80vI90udG-Yg&usqp=CAU" width=300 height=300 alt="Representación de una imagen" />
</center>
<br>

Este conjunto de imágenes nos generará la necesidad de producir una nueva dimensión, esto producto que las dimensiones son los espacios donde alojamos la información, por esto al conjunto de imágenes le agregaremos una dimensión que identifica cada una de las imágenes del conjunto, quedando representada por el tensor $G[0:n_d, 600, 400, 3]$. Por lo general, cuando tenemos imágenes con dimensionalidad 4 es porque se tratan de videos, o sea una secuencia de imágenes; el caso se complejiza aún más cuando agregamos sonido y esto se va a las pailas.

<blockquote>Dato:
La representación que posee cada una de las dimensiones puede cambiar dependiendo de la librería utilizada, en pytorch por ejemplo las dimensiones de una imagen vienen dadas por [batch, canales, alto, ancho] y no [batch, alto, ancho, canales] como en numpy.
</blockquote>

# ¿Ya, pero esto tiene aplicaciones más allá de guardar información en casilleros?

Para el caso de imágenes podemos encontrar múltiples aplicaciones con la manipulación de los tensores y operando matemáticamente con ellos. Algunas de las aplicaciones más conocidas (y que aplicaremos) son las siguientes:

- **Obtener el negativo de una imagen**: Consiste en obtener el color complementario de una imagen, para esto debemos restar la imagen con la máxima intensidad que podemos encontrar en una imagen (o sea 255).
    
    
- **Pasar a escala de grises una imagen**: Los valores RGB se convierten a escala de grises mediante la fórmula NTSC:

    $$ imagen\_gris = 0.299 * Rojo + 0.587 * Verde + 0.114 * Azul $$
    
    Esta fórmula representa la percepción relativa de la persona promedio del brillo de la luz roja, verde y azul.
    
    
- **Mejora de contraste**: Son múltiples las técnicas que nos permiten mejorar el contraste de una imagen, pero, una técnica simple para modificar los contrastes consta en obtener un factor de corrección llamado F en base al contraste deseado (C). Luego, es aplicado en la diferencia entre la imagen y 128. De esta forma obtenemos R, que es la imagen con la mejora de contraste deseada.

    $$ F=259*(C+255)/(255*(259-C)) $$
    $$ R=F*(img-128)+128 $$
  
  
- **Convolución**: Consiste en recorrer una imagen por cada uno de sus canales utilizando una matriz que lleva por nombre Kernel. El kernel, examinará los conjuntos de pixeles que recorre, aplicando una multiplicación de los valores circundantes ,y sumando todos los valores generados de este producto para generar un nuevo pixel en el tensor de salida.

![conv](https://media3.giphy.com/media/i4NjAwytgIRDW/giphy.gif "miracomorecorre")

---

# Desarrollo

En base a lo explicado y visto en clases, a continuación, deben construir cada uno de los programas solicitados en las actividades señaladas más abajo. Estás, deben ser desarrollados de forma grupal (**2 personas por grupo**) y, la solución no debe ser compartida con personas externas al grupo; si se detecta que dos grupos entregan el mismo trabajo, será considerado plagio y se tomaran medidas al respecto.

## 2. Creación de Clases y Funciones.

#### Importamos librerias utiles 😸

```{python}
#| cell_id: 752142eb10cd40f0a833f647673a2c7e
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 1829
#| execution_start: 1649390601248
#| source_hash: 8c85054c
# Libreria Core del lab.
import numpy as np
from pathlib import Path

# Librerias para graficar
import matplotlib.pyplot as plt

# Nota: Utilizar solo matplot para este lab. NO USAR PLOTLY,
# ya que tiene problemas de compatibilidad con imagenes

# Funcionalidades dependientes del Sistema Operativo.
import os

# Librerias utiles para cargar y generar Gifs
import imageio
from PIL import Image
from scipy.signal import convolve2d
```

### 2.1. Carga de imagenes y visualización

Descomprima el archivo "images_lab.zip" en algún directorio de su computador o plataforma, observen las imágenes y clasifíquenlas a su gusto, para luego en un diccionario cargar y agrupar las diferentes imágenes (no cree mas de tres llaves).

Hecho esto, visualize dos imágenes y verifique la dimensionalidad de estas imágenes con el comando *.shape*. Comente la dimensionalidad de las imágenes.

### Carga de imagenes en diccionarios

Las siguientes celdas de código le permitirá cargar las imágenes que utilizaremos durante este laboratorio.

La primera celda implementa la función `from_jpg`, la cual, dado una ruta, carga una imágen:

```{python}
#| cell_id: 70bcfe007f7a437aa79817a54d29a551
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 4
#| execution_start: 1649390603079
#| source_hash: 4d34909a
def from_jpg(path):
    ruta = Path(path) # Esto se cambia -> ruta de la carpeta google drive
    image = np.array(Image.open(ruta), dtype='int')
    return image
```

La segunda celda carga las imágenes y las guarda en un diccionario.

```{python}
#| cell_id: e8a53a510f57419d8502ea6656253fa1
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 184
#| execution_start: 1649390603084
#| source_hash: bda59e07
#| tags: []
images = {
    "gatitos": [
        from_jpg("./images_lab/gato1.jpg"),
        from_jpg("./images_lab/gato2.jpg"),
        from_jpg("./images_lab/gato4.jpg"),
    ],
    "Personas": [
        from_jpg("./images_lab/personas.jpg"),
        from_jpg("./images_lab/gurus.jpg"),
    ],
    "Monos_chinos": [from_jpg("./images_lab/monitos.jpg")],
}
```

### Plot de imagenes
A continuación, utilice la función `def show(imagen)` (definida más abajo) para explorar las imágenes cargadas en la celda anterior.

**Respuesta Esperada**:

```{python}
#| cell_id: 640d2a8ef5054248945266ef7aeb88a0
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 3
#| execution_start: 1649390603270
#| source_hash: 751c6de6
def show(imagen):
    plt.imshow(imagen)
    plt.show()
    x, y, z = imagen.shape
    print(f'Dimensiones de la imagen: {x}x{y} (Alto x Ancho)')
```

```{python}
#| cell_id: 32b1bde317dd4c3f986ce39153dc3ded
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 347
#| execution_start: 1649390603276
#| scrolled: true
#| source_hash: fe959f96
for groupname, group in images.items():
    print(f"\n\nA continuación las imágenes clasificadas como {groupname.upper()}:")
    for image in group:
        show(image)
```

### 2.2 Clase imagenes [2 puntos].

Ahora que sabemos cómo plotear y cargar una imagen, cree una clase llamada "Imagen" la que cumpla las siguientes características:

- [X] Un constructor que tome como argumento una imagen y que lo guarde como un atributo. `__init__` debe comprobar que la imagen es un arreglo de numpy (con `isinstance`) y adicionalmente que este tiene 3 dimensiones. En caso contrario, debe levantar excepciones con mensajes correspondientes al error detectado (ustedes definen el mensaje).
- [ ] Implemente el método `show()` que muestre la imagen usando la función `plt.show()`.
- [ ] Implemente el método `info()` que retorna un string con las dimensiones de la imagen.
- [ ] Sobrecargue el método mágico `__mul__`, `__add__` y `__sub__` para realizar operaciones matemáticas entre el objeto y arrays, int o floats. Realice la función pensando que la operación se puede aplicar tanto para izquierda y derecha. Como estamos trabajando con imágenes los outputs deben ser enteros, por esto se le aconseja utilizar `.astype(int)` para transformar los arrays de salida a un formato legible por matplotlib.
- [ ] Es importante que para las operaciones `__add__` y `__sub__` implementen una saturación de las imágenes. Es decir, la suma o resta deben dar como valor máximo 255 y/o como valor mínimos mayores o iguales a 0.
- [ ] Para el caso de `__mul__` deben implementar un método que nos permita saturar las imágenes (es decir que los valores del array no sobrepasen 255) y también no nos permita obtener valores inferiores a cero.

Implementadas los métodos, compruebe que la funcionalidad es la correcta mediante la ejecución de los asserts incluidos un par de celdas más abajo.

> **Notas:**
- Pueden reutilizar el código implementado en las celdas anteriores para implementar los métodos `show` e `info` . Sin embargo, No invoquen directamente esas funciones.
- La idea es que la imagen contenida en la clase sea inmutable, por ende, todos los metodos que modifiquen la imagen contenida en el objeto deberan retornar un nuevo objeto de la clase `Imagen` que contenga la imagen modificada.

```{python}
#| cell_id: 617e9d8d90434215a9ed59cd31394478
#| deepnote_cell_height: 2005
#| deepnote_cell_type: code
#| tags: []
class Imagen:
    """Clase contenedora de imágenes"""

    def __init__(self, img):
        if isinstance(img, np.ndarray):
            if img.ndim != 3:
                raise ("El argumento debe ser un arreglo de numpy de solo 3 dimensiones")
            if img.shape[-1] != 3:
                raise (
                    "El argumento debe ser un arreglo de numpy de solo 3 dimensiones "
                    "tal que la última dimensión solo tiene 3 canales"
                )
            self.imagen = img
        else:
            raise TypeError(
                "Debes entregar un arreglo de numpy como argumento del constructor de "
                "Imagen"
            )

    def show(self):
        """Muestra la imágen contenida en el objeto.
        Su funcionalidad debe ser igual a la de la función mostrar_imagen.
        """
        plt.imshow(self.imagen)
        plt.show()

    def info(self):
        """ Imprime las características de la imagen cargada: Alto y ancho.
        """
        x, y, z = self.imagen.shape
        print(f"Características de la imagen:\n\t> Alto: {x}\n\t> Ancho:{y}")


    def __add__(self, other):
        """Redefine la operación + entre imagen y escalar.

        # Idea, usar indexado condicial (similar a los filtros de pandas).
        # Sumar y luego que en cada pixel mayor a 255 sea asignado el máximo.
        # Ver los tests para mas información.

        Parameters
        ----------
        other : Union[int, float, np.ndarray]
            Escalar o arreglo que será sumado a cada pixel de la imagen
        """
        return Imagen(
            (self.imagen + other)
                      .clip(0, 255)
                      .astype(int)
        )

    def __radd__(self, other):
        """Operación conmutativa de __add__.

        Hint: debería llamar a __add__...

        Parameters
        ----------
        other : Union[int, float, np.ndarray]
            Escalar o arreglo que será sumado a cada pixel de la imagen
        """
        return self.__add__(other) # Aprovechamos conmutatividad de la suma en numpy arrays.

    def __sub__(self, other):
        """Redefine la operación - entre imagen y escalar.

        # Idea, usar indexado condicial (similar a los filtros de pandas).
        # Restar y luego que en cada pixel mayor a 255 sea asignado el máximo.
        # Caso similar para valores menores a 0, donde debera asignar el minimo a esos pixeles
        # Ver los tests para mas información.

        Parameters
        ----------
        other : Union[int, float, np.ndarray]
            Escalar o arreglo que será sumado a cada pixel de la imagen
        """
        return Imagen(
            (self.imagen - other)
                      .clip(0,255)
                      .astype(int)
        )

    def __rsub__(self, other):
        """Operación conmutativa de __sub__.

        Parameters
        ----------
        other : Union[int, float, np.ndarray]
            Escalar o arreglo que será sumado a cada pixel de la imagen
        """
        return Imagen(
            (other - self.imagen)
                      .clip(0, 255)
                      .astype(int)
        )

    def __mul__(self, other):
        """Redefine la operación * entre imagen y escalar.

        # Idea, usar indexado condicial (similar a los filtros de pandas).
        # Sumar y luego que en cada pixel mayor a 255 sea asignado el máximo y
        # cada valor inferior a 0 debe ser 0.
        # Ver los tests para mas información.

        Parameters
        ----------
        other : Union[int, float, np.ndarray]
            Escalar o arreglo que será sumado a cada pixel de la imagen
        """
        return Imagen(
            (self.imagen * other)
                      .clip(0,255)
                      .astype(int)
        )

    def __rmul__(self, other):
        """Operación conmutativa de __mul__.k

        Hint: debería llamar a __mul__...

        Parameters
        ----------
        other : Union[int, float, np.ndarray]
            Escalar o arreglo que será sumado a cada pixel de la imagen
        """
        return self.__mul__(other)
```

**Resultados esperados:**

```{python}
#| cell_id: e2be43ccdcd14490b2a6f9af4839f8a2
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 4
#| execution_start: 1649390603632
#| source_hash: 3238808e
gatito = Imagen(images["gatitos"][1])
gurus = Imagen(images["Personas"][1])
```

```{python}
#| cell_id: a6965f308fe243cd9743008f2355762e
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 567
#| execution_start: 1649390603639
#| source_hash: 49b51823
# Test show e info.
gatito.show()
gatito.info()

gurus.show()
gurus.info()
```

```{python}
#| cell_id: 20122afa10d843c5b5d355ac40b27f35
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 87
#| execution_start: 1649390604209
#| source_hash: 8bcc2c1f
# Tests de los overload de operadores.

# Test __add__
# Idea del test: Todos los elementos de la imagen deben ser a lo más 255.

# Test __add__
assert np.max((gatito + 1000).imagen) == 255

# Test __radd__
assert np.max((1000 + gatito).imagen) == 255

# Test __sub__
assert np.min((gatito - (-1000)).imagen) == 255

# Test __sub__
assert np.max((gatito - 1000).imagen) == 0

# Test __rsub__
assert np.min((1000 - gatito ).imagen) == 255

# Test __mul__ (probar minimo)
assert np.max((-555555 * gatito).imagen) == 0

# Test __mul__ (probar maximo)
assert np.max((555555*gatito).imagen) == 255

# Test __rmul__ (probar minimo)
assert np.max((gatito*-555555).imagen) == 0

# Test __rmul__ (probar maximo)
assert np.max((gatito*555555).imagen) == 255
```

### 2.3 Clase de Procesamiento de Imagenes [2 puntos]

Ahora que comprenden las diferentes dimensiones que componen a una imagen (en la práctica), ahora realizaremos diferentes tareas de procesamiento de imágenes. Para esto, deben crear una clase llamada "`LibImagen`" que cumpla los siguientes requisitos:

- [ ] Pasar una imagen a escala de grises, para esto utilice la ecuación (1) expuesta en este mismo notebook.
- [ ] Obtener los canales R, G y B de forma individual.
- [ ] Crear una función que pase a negativo de la imagen alojada.
- [ ] Mejorar el contraste de una imagen.
- [ ] Realizar una convolución sobre la imagen.
- [ ] Documentar la clase creada y verificar la documentación con el comando help().

> **Nota 🗒️**: Todo método debe tomar una Imagen y retornar una nueva Imagen.

> **Nota 2**: El tipo de datos del arreglo de la imagen que generen o modifiquen debe ser "int". De lo contrario, puede no visualizarse correctamente.

```{python}
#| cell_id: 9e607c51fda447779417c818998c0c09
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 2
#| execution_start: 1649390604313
#| source_hash: 78b7cd0f
class LibImagen():

    def to_negative(self, img_in):
        """Convierte imagen a negativo.

        Parameters
        ----------
        img_in : Imagen
            Objeto Imagen que contiene imagen a procesar.

        Returns
        -------
        Imagen
            Objeto Imagen con la imagen procesada.
        """
        return 255 - img_in

    def to_gray(self, img_in):
        """
        Transforma una imagen en RGB a la escala de grises.

        Parameters
        ----------
        img_in : Imagen
            Objeto Imagen que contiene una imagen.

        Returns
        -------
        Imagen
            Una que contiene una imagen con 3 canales.
            Los 3 canales deben tener los mismos valores.
        """
        nueva_imagen = np.zeros_like(img_in.imagen, dtype=int)
        nueva_imagen[:, :, 0] = nueva_imagen[:, :, 1] = nueva_imagen[:, :, 2] = (
            lambda x: 0.299 * x[:, :, 0] + 0.587 * x[:, :, 1] + 0.114 * x[:, :, 2]
            )(img_in.imagen)
        return Imagen(nueva_imagen)
                      

    def get_channel(self, img_in, channel):
        """Obtiene un canal de un color seteando el resto de los canales en 0.

        Parameters
        ----------
        img_in : Imagen
            Objeto Imagen que contiene una imagen.
        channel : str
            Nombre del canal que será seleccionado. Valores posibles: ('r','g' o 'b').

        Returns
        -------
        Imagen:
            Objeto Imagen que contiene una imagen con 3 canales.
            Solo el canal seleccionado debe tener valores distintos a 0.
        """
        coor = {"r": 0, "g": 1, "b": 2}
        nueva_img = np.zeros(img_in.imagen.shape, dtype=int)
        nueva_img[:, :, coor[channel]] = img_in.imagen[:, :, coor[channel]].copy()
        return Imagen(nueva_img)

    def set_contrast(self, img_in, C):
        """Mejora el contraste de una imagen.

        Parameters
        ----------
        img_in : Imagen
            Objeto Imagen que contiene una imagen.
        C : float
            Parámetro que define el ajuste de contraste.

        Returns
        -------
        Imagen
            Objeto Imagen que contiene una imagen con 3 canales modificados.
        """
        return (259 * (C + 255) / (255 * (259 - C))) * (img_in - 128) + 128
        

    def conv_channel(self, img_in, kernel):
        """Aplica convolución a la imagen con el kernel entregado.
        
        Parameters
        ----------
        img_in : Imagen
            Objeto Imagen que contiene una imagen.
        kernel : np.ndarray
            Matriz kernel de la convolución.

        Returns
        -------
        Imagen
            Objeto Imagen que contiene una imagen con 3 canales modificados.
        """
        img = img_in.imagen
        img_out = []
        for i in range(img.shape[-1]):
            img_channel = convolve2d(img[:, :, i],
                                     kernel,
                                     mode="same",
                                     boundary="symm")
            img_out.append(img_channel)
        new_image = np.stack(img_out, axis=2)
        new_image[new_image > 255], new_image[new_image < 0] = 255, 0
        return Imagen(new_image.astype(int))
```

### 2.4 Probar [0,5 puntos]

**Respuesta Esperada**:

```{python}
#| cell_id: 350718e0babb4efb81802fb4a2a1ac51
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 2331
#| execution_start: 1649390604359
#| source_hash: 80d9e160
gatito = Imagen(images["gatitos"][1])

gatito.show()

lib = LibImagen()

print('Negativo')
lib.to_negative(gatito).show()

print('Grayscale')
lib.to_gray(gatito).show()

print('Selección de Canales')
lib.get_channel(gatito, "r").show()
lib.get_channel(gatito, "g").show()
lib.get_channel(gatito, "b").show()

print('Mejora de Contraste')
lib.set_contrast(gatito, 0).show()

print('Convolución')
kernel = np.array([[-1, -1,  -1],
                   [-1,  8,  -1],
                   [-1, -1,  -1]])

lib.conv_channel(gatito, kernel).show()
```

#### Implementar 5 Kernels y probarlos con las imagenes

Referencia:
https://en.wikipedia.org/wiki/Kernel_(image_processing)

```{python}
#| cell_id: 3b6a6dafe24f4fc29938a34039fd3d7d
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: false
#| execution_millis: 174
#| execution_start: 1649390606682
#| source_hash: 96d26b22
# Convolución

#Ridge
kernel_1 = np.array([
    [0, -1,  0],
    [-1,  4,  -1],
    [0, -1,  0],
])
#Sharpen
kernel_2 = np.array([
    [0, -1,  0],
    [-1,  5,  -1],
    [0, -1,  0],
])
#Box blur
kernel_3 = (1/9) * np.array([
    [1, 1, 1],
    [1, 1, 1],
    [1, 1, 1],
])
#Gaussian blur
kernel_4 = (1/256) * np.array([
    [-1, 4, 6, 4, 1],
    [4, 16, 24, 16, 4],
    [6, 24, 36, 24, 6],
    [4, 16, 24, 16, 4],
    [-1, 4, 6, 4, 1],
])

#Unsharp masking
kernel_5 = -(1/256) * np.array([
    [-1, 4, 6, 4, 1],
    [4, 16, 24, 16, 4],
    [6, 24, -476, 24, 6],
    [4, 16, 24, 16, 4],
    [-1, 4, 6, 4, 1],
])

kernels = (kernel_1, kernel_2, kernel_3, kernel_4, kernel_5)
for filtro in kernels:
    lib.conv_channel(gatito, filtro).show()
```

**Comente:**

Para finalizar, comente que hace (o debería hacer) cada filtro convolucional al aplicarlas a su imagen de ejemplo.

```
(Escriba aquí su justificación)

El filtro...

1.-  Ridge es un filtro que ayuda a la detección de lineas de borde en la imagen.
2.- Sharpen es un filtro que permite aumentar el contraste de la imagen.
3.- Box blur es un ejemplo de filtro que permite difuminar la imagen, cambiando cada pixel por un promedio  ponderado de los circundantes.
4.- El Gaussian blur es otro ejemplo de filtro que permite difuminar la imagen, esta vez con un promedio que pondera mayor peso a los pixeles cercanos.
5.- Unsharp masking reduce el contraste basado en el método gaussiano (como un difuminado muy leve).
```



## 3. Secuencias y Detección de Movimiento

### 3.2. Secuencia de Imagenes [1,5 punto]

A continuación, deben programar una función que nos permite resaltar los objetos en movimientos de una secuencia de imágenes. Para esta parte del laboratorio, deberá utilizar las imágenes dispuestas en la carpeta `secuencia_plaza` del archivo zip subido a material docente.

Primero que todo, cargue la secuencia de imágenes que se encuentran en el directorio. Para esto, se recomienda utilizar el comando `os.listdir(dir)`, ya que este le facilitará la carga de un gran número de imágenes (pruebe el comando y vea que sucede).

```{python}
#| cell_id: aa1d1f7b746f438ca29740e7453576fe
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: true
#| execution_millis: 3408
#| execution_start: 1649387524462
#| owner_user_id: 8c58f50a-7a08-41a2-952e-38bdb7507048
#| source_hash: f75f956e
path = "./secuencia_plaza/"
img_names = os.listdir(path)

imagenes = np.array(list(map(lambda img: np.array(Image.open(path + img)), img_names)))
```

![plaza se mueve](https://media0.giphy.com/media/ZAzlopoHETs5lZQ6EZ/giphy.gif "plaza")

Para realizar este ejercicio utilizaremos un método super básico para la eliminación de fondo. Para esto sigue la siguiente receta:
 1. Pase a escala de grises todas las imágenes secuenciales.
 2. Almacene en una variable la resta de las imágenes consecutivas.

   $$ imagen\_out = imagen(t) - imagen(t+1) $$

 3. Establezca un umbral para eliminar algunos artefactos. Pruebe con al menos 3 umbrales.

$$ imagen\_out = imagen\_out> Umbral $$

**Nota**: No es necesario que construya una clase para esta parte.

```{python}
#| cell_id: 6dbb938c728741a9acae26e697be436d
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: true
#| source_hash: 65bbd50f
def dect_mov(sec_img, umbral=30):
    '''Función que elimina el fondo estático
    
     Parameters
        ----------
        sec_in : np.ndarray
            Vector con la secuencia de imágenes a modificar.
        kernel : np.ndarray
            Umbral para eliminación de artefactos.

        Returns
        -------
        np.ndarray
            Vector con la secuencia de imágenes modificadas.
    '''
    lib = LibImagen()
    out_img = np.array([lib.to_gray(Imagen(img)).imagen for img in sec_img])
    out_img = (out_img - out_img.roll(x, 1))[1:].clip(0, 255).astype(np.uint8)
    out_img = out_img[out_img > umbral]
    return out_img

### NO PUDE PROBAR UMBRALES PORQUE LA RAM NO ME DA PARA CORRER EL CÓDIGO
```

### 3.3 Resultado

Ahora es tiempo de relajarse y ver si nuestro experimento logra resaltar los objetos en movimiento de esta polémica Plaza, para esto solo ejecute el siguiente Código y espere.

```{python}
#| cell_id: af938f9962f4445f96f36f59006a53da
#| deepnote_cell_type: code
#| deepnote_to_be_reexecuted: true
#| source_hash: d3bba459
#imageio.mimsave('plaza.gif', dect_mov(imagenes)) # Listo

#No hubo forma de correr el código, ni la ram del colab se la pudo :c
```

**Ejemplo de resultado esperado:**

![resultados](https://media3.giphy.com/media/SKV3bgUzHt0MLJTWW2/giphy.gif "res")

# Conclusión
Eso ha sido todo para el lab de hoy, recuerden que el laboratorio tiene un plazo de entrega de una semana. Cualquier duda del laboratorio, no duden en contactarnos por mail o U-cursos.

![Gracias Totales!](https://media.giphy.com/media/5xtDaroSIXzLa6dvfI4/giphy.gif "cerati")

### Referencias lab 1.

- http://www.cs.cornell.edu/cv/SummerSchool/Introduction.pdf
- https://en.wikipedia.org/wiki/Tensor
- https://support.ptc.com/help/mathcad/es/index.html#page/PTC_Mathcad_Help/example_grayscale_and_color_in_images.html
- http://w3.unpocodetodo.info/canvas/negativo.php
- http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/

<br>
<center>
<img src="https://i.kym-cdn.com/photos/images/original/001/194/195/b18.png" width=100 height=50 />
</center>
<br>

